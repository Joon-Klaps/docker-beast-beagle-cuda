name: Monitor beast-mcmc repo, Update version, Build and Push Docker Image

on:
    schedule:
        - cron: "0 1 * * *" # Run every day at 01:00 UTC
    workflow_dispatch:

jobs:
    build-and-push:
        name: Rename the version and build to docker hub
        runs-on: ubuntu-latest
        env:
            DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
            GITHUB_TOKEN: ${{ secrets.KLAPS_BOT_AUTH_TOKEN }}
        steps:
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
              with:
                  token: ${{ env.GITHUB_TOKEN }}

            - name: Get latest release information
              id: latest_release
              run: |
                  # Fetch release information and store in a variable
                  curl -L \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    https://api.github.com/repos/beast-dev/beast-mcmc/releases \
                    > release_info.json

                  # Extract tag name and tgz url, handling potential null or missing values
                  tag_name=$(cat release_info.json | jq -r '.[0].tag_name')
                  echo "Tag name: $tag_name"
                  tgz_url=$(cat release_info.json | jq -r '.[0].assets[] | select(.name | endswith(".tgz")) | .browser_download_url')
                  echo "tgz_url: $tgz_url"

                  # Validate outputs
                  if [ -z "$tag_name" ] || [ "$tag_name" = "null" ]; then
                    echo "Error: Could not extract tag name"
                    exit 1
                  fi

                  if [ -z "$tgz_url" ] || [ "$tgz_url" = "null" ]; then
                    echo "Error: Could not find .tgz asset URL"
                    exit 1
                  fi

                  # Set outputs
                  echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
                  echo "TGZ_URL=$tgz_url" >> $GITHUB_ENV
                  rm -f release_info.json

            - name: Update install-beast.sh
              run: |
                  sed -i "s/BEAST_VERSION='.*'/BEAST_VERSION='${{ env.TAG_NAME }}'/g" ${GITHUB_WORKSPACE}/install-beast.sh
                  sed -i "s/BROWSER_DOWNLOAD_URL='.*'/BROWSER_DOWNLOAD_URL='${{ env.TGZ_URL }}'/g" ${GITHUB_WORKSPACE}/install-beast.sh

            - name: Check if install-beast.sh has been updated
              run: |
                  git diff --exit-code ${GITHUB_WORKSPACE}/install-beast.sh || echo "CHANGED=YES" >> $GITHUB_ENV
                  echo "File changed: ${{ env.CHANGED }}"

            - name: Build Docker image
              if: env.CHANGED == 'YES'
              run: |
                  echo "$DOCKERHUB_PASS" | docker login -u jklaps --password-stdin
                  docker build --no-cache . -t jklaps/beast_beagle_cuda:${{ env.TAG_NAME }} -t jklaps/beast_beagle_cuda:latest

            - name: Push Docker images to DockerHub
              if: env.CHANGED == 'YES'
              run: |
                  echo "$DOCKERHUB_PASS" | docker login -u jklaps --password-stdin
                  docker push jklaps/beast-beagle-cuda:${{ env.TAG_NAME }}
                  docker push jklaps/beast-beagle-cuda:latest

            - name: Update readme.sh
              if: env.CHANGED == 'YES'
              run: |
                  sed -i "s/LATEST_VERSION = '.*'/LATEST_VERSION = '${{ env.TAG_NAME }}'/g" ${GITHUB_WORKSPACE}/readme.md

            - name: Commit and push changes
              if: env.CHANGED == 'YES'
              run: |
                  git config user.email "167566642+Klaps-bot@users.noreply.github.com"
                  git config user.name "Klaps-bot"
                  git config push.default current
                  git add ${GITHUB_WORKSPACE}/install-beast.sh
                  git add ${GITHUB_WORKSPACE}/readme.md
                  git commit -m "[automated] Update install-beast.sh with ${{ env.TAG_NAME }}"
                  git push
